{"version":3,"sources":["js/refs.js","js/timer.js","index.js"],"names":["timer","document","getElementById","daysRef","querySelector","hoursRef","minsRef","secsRef","CountdownTimer","constructor","selector","targetDate","intervalId","getTimeComponents","time","days","pad","Math","floor","hours","mins","secs","textContent","clearInterval","value","String","padStart","currentDate","Date","now","deltaTime","start","setInterval","myTimer"],"mappings":";AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACXA,MAAOC,SAASC,eAAe,WAC/BC,QAASF,SAASG,cAAc,uBAChCC,SAASJ,SAASG,cAAc,wBAChCE,QAAQL,SAASG,cAAc,uBAC/BG,QAASN,SAASG,cAAc,wBALrB,QAAA,QAAA;;ACiDf,aAjDA,IAAA,EAAA,EAAA,QAAA,cAiDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA/CA,MAAMI,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,WAAa,KAGpBC,kBAAkBC,GACVC,MAAAA,EAAO,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QACnCK,EAAQ,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAC9DM,EAAO,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MACxDO,EAAO,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,MAEpDA,EAAO,GACJX,EAAAA,QAAAA,QAAQmB,YAAcP,EACtBV,EAAAA,QAAAA,SAASiB,YAAcH,EACvBb,EAAAA,QAAAA,QAAQgB,YAAcF,EACtBb,EAAAA,QAAAA,QAAQe,YAAcD,GAE3BE,cAAc,KAAKX,YAIvBI,IAAIQ,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnC1B,QACQ2B,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKnB,WAAagB,EAE/Bd,KAAAA,kBAAkBiB,GAGzBC,QACO/B,KAAAA,QACAY,KAAAA,WAAaoB,YAAY,KACvBhC,KAAAA,SACJ,MAIP,MAAMiC,EAAU,IAAIzB,EAAe,CACjCE,SAAU,WACVC,WAAY,IAAIiB,KAAK,kBAGvBK,EAAQF;;;;AChDR,aADA,QAAA,iBACA,QAAA","file":"src.44eedc84.js","sourceRoot":"../src","sourcesContent":["export default {\n    timer: document.getElementById('timer-1'),\n    daysRef: document.querySelector('[data-value=\"days\"]'),\n    hoursRef:document.querySelector('[data-value=\"hours\"]'),\n    minsRef:document.querySelector('[data-value=\"mins\"]'),\n    secsRef: document.querySelector('[data-value=\"secs\"]'),\n}","import refs from './refs.js';\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.intervalId = null;\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    if (time > 0) {\n      refs.daysRef.textContent = days;\n      refs.hoursRef.textContent = hours;\n      refs.minsRef.textContent = mins;\n      refs.secsRef.textContent = secs;\n    } else {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  timer() {\n    const currentDate = Date.now();\n    const deltaTime = this.targetDate - currentDate;\n\n    this.getTimeComponents(deltaTime);\n  }\n\n  start() {\n    this.timer();\n    this.intervalId = setInterval(() => {\n      this.timer();\n    }, 1000);\n  }\n}\n\nconst myTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jul 10, 2021'),\n});\n\nmyTimer.start();\n","import './js/timer.js';\nimport './sass/main.scss';"]}